{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","views/Jungles/components/Hero.tsx","views/Jungles/components/YourProject.tsx","views/Jungles/Jungles.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","Title","styled","Heading","attrs","as","size","StyledHero","Text","div","StyledContainer","Container","theme","mediaQueries","sm","lg","Hero","TranslateString","StyledButton","Button","props","colors","primary","Row","secondary","Badge","CommunityIcon","svg","StyledImage","Image","StyledCard","Card","YourPoject","src","width","height","href","viewBox","color","xmlns","d","Cards","Wrapper","Jungles","useState","activeIndex","setActiveIndex","Page","onClick","index","variant","YourProject"],"mappings":"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","file":"static/js/16.68189c89.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  // color: #fff;\n  margin-bottom: 24px;\n  font-size: 32px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background-image: linear-gradient(180deg, #53dee9 0%, #1fc7d4 100%);\n  padding-bottom: 40px;\n  padding-top: 40px;\n  display: flex;\n  flex-direction: row;\n`\n\nconst StyledContainer = styled(Container)`\n  flex: 1;\n  padding-right: 0;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <Title>{TranslateString(999, 'Submit your project and join SigmaSwap!')}</Title>\n        {/* <Blurb>{TranslateString(999, `You can unstake at any time. Rewards are calculated per block.`)}</Blurb> */}\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, CardFooter, Heading, Image, Text } from '@pancakeswap-libs/uikit'\n\nconst StyledButton = styled(Button)`\n  color: ${(props) => props.theme.colors.primary};\n  background-color: transparent !important;\n  box-shadow: none !important;\n  border: 2px solid ${(props) => props.theme.colors.primary};\n  width: 100%;\n  margin: 16px 0px;\n  display: inline-flex;\n\n  &:hover {\n    opacity: 0.8;\n  }\n`\n\nconst Row = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Title = styled(Heading).attrs({ size: 'lg' })`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nconst Badge = styled.div`\n  border: 2px solid;\n  border-radius: 16px;\n  padding: 0px 8px;\n  width: fit-content;\n  display: inline-flex;\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst CommunityIcon = styled.svg`\n  fill: ${({ theme }) => theme.colors.primary};\n`\n\nconst StyledImage = styled(Image)`\n  margin: 16px 0px;\n`\n\nconst StyledCard = styled(Card)`\n  max-width: 31.5%;\n  min-width: 280px;\n  width: -webkit-fill-available;\n`\n\nconst YourPoject = () => {\n  return (\n    <StyledCard>\n      <CardBody>\n        <Title as=\"h2\">Your Project? ðŸ‘€</Title>\n        <StyledImage src=\"/images/egg/ETH.png\" width={64} height={64} />\n        <Title as=\"h2\">???</Title>\n        <Text>Create a pool for your token</Text>\n        <StyledButton>\n          <a href=\"/\">Apply now</a>\n        </StyledButton>\n        <Row>\n          <Text>APR:</Text>\n          <Text>???</Text>\n        </Row>\n        <Row>\n          <Text>Your Stake:</Text>\n          <Text>??? SIGMA</Text>\n        </Row>\n      </CardBody>\n      <CardFooter>\n        <Badge>\n          <CommunityIcon viewBox=\"0 0 24 24\" width=\"24px\" color=\"text\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 12.75C13.63 12.75 15.07 13.14 16.24 13.65C17.32 14.13 18 15.21 18 16.38V17C18 17.55 17.55 18 17 18H7C6.45 18 6 17.55 6 17V16.39C6 15.21 6.68 14.13 7.76 13.66C8.93 13.14 10.37 12.75 12 12.75ZM4 13C5.1 13 6 12.1 6 11C6 9.9 5.1 9 4 9C2.9 9 2 9.9 2 11C2 12.1 2.9 13 4 13ZM5.13 14.1C4.76 14.04 4.39 14 4 14C3.01 14 2.07 14.21 1.22 14.58C0.48 14.9 0 15.62 0 16.43V17C0 17.55 0.45 18 1 18H4.5V16.39C4.5 15.56 4.73 14.78 5.13 14.1ZM20 13C21.1 13 22 12.1 22 11C22 9.9 21.1 9 20 9C18.9 9 18 9.9 18 11C18 12.1 18.9 13 20 13ZM24 16.43C24 15.62 23.52 14.9 22.78 14.58C21.93 14.21 20.99 14 20 14C19.61 14 19.24 14.04 18.87 14.1C19.27 14.78 19.5 15.56 19.5 16.39V18H23C23.55 18 24 17.55 24 17V16.43ZM12 6C13.66 6 15 7.34 15 9C15 10.66 13.66 12 12 12C10.34 12 9 10.66 9 9C9 7.34 10.34 6 12 6Z\" />\n          </CommunityIcon>\n          <Text color=\"primary\">Community</Text>\n        </Badge>\n      </CardFooter>\n    </StyledCard>\n  )\n}\n\nexport default YourPoject\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport Page from 'components/layout/Page'\nimport Hero from './components/Hero'\nimport YourProject from './components/YourProject'\n\nconst Cards = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst Jungles: React.FC = () => {\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        <Hero />\n        <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onClick={handleClick} size=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(999, 'Active')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(999, 'Inactive')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Cards>\n          <YourProject />\n        </Cards>\n      </Page>\n    </>\n  )\n}\n\nexport default Jungles\n"],"sourceRoot":""}