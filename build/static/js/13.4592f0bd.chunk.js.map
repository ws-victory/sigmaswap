{"version":3,"sources":["views/Home/components/CardValue.tsx","hooks/useTokenBalance.ts","hooks/useHarvest.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/LpStats.tsx","views/Home/Home.tsx"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useHarvest","farmPid","dispatch","useDispatch","masterChefContract","useMasterchef","useToast","toastError","toastSuccess","onReward","useCallback","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","earning","pow","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","mb","fontWeight","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","eggPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","size","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","StyledLpStats","LpStats","Hero","Cards","BaseLayout","mediaQueries","sm","lg","Home","cookies","Cookies","useQueryParam","StringParam","ref","isAddress","rot13","set","Page","mt","FarmStakingCard"],"mappings":"iIAAA,oCAoCeA,IAzB6B,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,SAA0C,IAAhCC,gBAAgC,MAArB,OAAqB,EAAbC,EAAa,EAAbA,OACjF,EAA4BC,qBAAW,CACrCC,MAAO,EACPC,IAAKN,EACLO,SAAU,EACVC,UAAW,IACXP,cAEeQ,IAAbR,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEU,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJAG,qBAAU,WACRF,EAAYG,QAAQf,KACnB,CAACA,EAAOY,IAGT,eAAC,IAAD,CAAMV,SAAUA,EAAhB,UACGC,EACAO,O,mNCFMM,EAAiB,WAC5B,IAAQC,EAAgBC,cAAhBD,YACR,EAAsCE,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAVAP,qBAAU,WAAM,4CACd,8BAAAQ,EAAA,6DACQC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQP,cAAcQ,OAF1D,OAEQC,EAFR,OAGER,EAAe,IAAIS,IAAUD,IAH/B,4CADc,uBAAC,WAAD,wBAOdE,KACC,CAACd,IAEGG,GAGIY,EAAmB,SAACC,GAC/B,MAA8Bd,mBAAS,IAAIW,IAAU,IAArD,mBAAOI,EAAP,KAAgBC,EAAhB,KACQlB,EAAgBC,cAAhBD,YAYR,OAVAH,qBAAU,YACU,uCAAG,8BAAAQ,EAAA,6DACbC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAaI,QAAQS,UAAU,8CAA8CR,OAF5E,OAEbS,EAFa,OAGnBF,EAAW,IAAIL,IAAUO,IAHN,2CAAH,qDAMlBC,KACC,CAACL,EAAchB,IAEXiB,GAGMK,IArDS,SAACN,GACvB,MAA8Bd,mBAAS,IAAIW,IAAU,IAArD,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAuEK,cAA/DC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SACTC,EAAgBzB,cAAhByB,YAaR,OAXA7B,qBAAU,WAMJ2B,GAAWC,GALG,uCAAG,4BAAApB,EAAA,sEACDsB,YAAgBF,EAAUT,EAAcQ,GADvC,OACbI,EADa,OAEnBV,EAAW,IAAIL,IAAUe,IAFN,2CAAH,oDAMhBP,KAED,CAACG,EAASC,EAAUT,EAAcU,IAE9BT,I,oMClBIY,EAAa,SAACC,GACzB,IAAMC,EAAWC,cACTR,EAAYD,cAAZC,QACFS,EAAqBC,cAC3B,EAAqCC,cAA7BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,aAcpB,MAAO,CAAEC,SAZaC,sBAAW,sBAAC,4BAAAlC,EAAA,+EAETmC,YAAQP,EAAoBH,EAASN,GAF5B,cAExBiB,EAFwB,OAG9BV,EAASW,YAAuBlB,IAChCa,EAAa,UAAW,oCAJM,kBAKvBI,GALuB,uCAO9BL,EAAW,qBAAD,6CAPoB,mBAQvB,GARuB,yDAU/B,CAACZ,EAASO,EAAUD,EAASG,EAAoBG,EAAYC,MAKrDM,EAAgB,SAACC,GAC5B,IAAQpB,EAAYD,cAAZC,QACFS,EAAqBC,cAU3B,MAAO,CAAEI,SARaC,sBAAW,sBAAC,4BAAAlC,EAAA,6DAC1BwC,EAAkBD,EAASE,QAAO,SAACC,EAAOC,GAC9C,MAAM,GAAN,mBAAWD,GAAX,CAAkBP,YAAQP,EAAoBe,EAAKxB,OAClD,IAH6B,kBAKzByB,QAAQC,IAAIL,IALa,2CAM/B,CAACrB,EAASoB,EAAUX,O,uTCEVkB,EA3Ba,WAC1B,MAAkDjD,mBAA4B,IAA9E,mBAAOkD,EAAP,KAA0BC,EAA1B,KACQ7B,EAAYD,cAAZC,QACAE,EAAgBzB,cAAhByB,YAqBR,OAnBA7B,qBAAU,WAcJ2B,GAbe,uCAAG,gCAAAnB,EAAA,6DACdiD,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,gBACNC,OAAQ,CAACJ,EAAKT,IAAKxB,OAJD,SAOKsC,YAAUC,EAAeT,GAP9B,OAOdU,EAPc,OAQdC,EAAUV,IAAYC,KAAI,SAACC,EAAMS,GAAP,mBAAC,eAAsBT,GAAvB,IAA6BxC,QAAS,IAAIJ,IAAUmD,EAAWE,SAE/Fb,EAAqBY,GAVD,2CAAH,oDAcjBE,KAED,CAAC3C,EAASE,IAEN0B,G,0BCfMgB,EAfY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACtBC,EAAkBC,cAGxB,OAFoBhD,cAAZC,QAUD,cAAC1C,EAAA,EAAD,CAAWC,MAAOsF,IANrB,cAAC,IAAD,CAAMG,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGJ,EAAgB,IAAK,aCSfK,EAfW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrBN,EAAkBC,cAGxB,OAFoBhD,cAAZC,QAUD,cAAC1C,EAAA,EAAD,CAAWC,MAAO6F,EAAa3F,SAAS,SAN3C,cAAC,IAAD,CAAMuF,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGJ,EAAgB,IAAK,a,kBCkBfO,EA1BQ,WACrB,MAA+B3E,mBAAS,IAAxC,mBAAO4E,EAAP,KAAiB5D,EAAjB,KACQM,EAAiCD,cAAjCC,QACAE,EAAgBzB,cAAhByB,YAoBR,OAlBA7B,qBAAU,WAaJ2B,GAZkB,uCAAG,8BAAAnB,EAAA,6DACjBiD,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,gBACNC,OAAQ,CAACJ,EAAKT,IAAKxB,OAJE,SAOLsC,YAAUC,EAAeT,GAPpB,OAOjB1B,EAPiB,OASvBV,EAAWU,GATY,2CAAH,oDAapBmD,KAED,CAACvD,EAASE,IAENoD,G,SCdHE,EAAwBC,YAAOC,IAAPD,CAAH,sKAOrBE,EAAQF,IAAOG,IAAV,oDAILC,EAAYJ,IAAOK,IAAV,oDAITC,GAAQN,IAAOG,IAAV,+DACA,qBAAGI,MAAkBC,OAAOC,cAIjCC,GAAUV,IAAOG,IAAV,iDAoEEQ,GAhEW,WACxB,MAAkC1F,oBAAS,GAA3C,mBAAO2F,EAAP,KAAkBC,EAAlB,KACQtE,EAAYD,cAAZC,QACF8C,EAAkBC,cAClBwB,EAAmB5C,IACnByB,EAAcoB,YAAiB1E,YAAgBb,gBAC/CwF,EAAWC,cAAmBC,WAE9B9B,EADcQ,IACY/B,QAAO,SAACC,EAAOqD,GAC7C,OAAOrD,EAAQ,IAAIlC,IAAUuF,GAAShB,IAAI,IAAIvE,IAAU,IAAIwF,IAAI,KAAKF,aACpE,GAEGG,EAAoBP,EAAiBQ,QAAO,SAACC,GAAD,OAAiBA,EAAYvF,QAAQkF,WAAa,KAC5F7D,EAAaK,YAAc2D,EAAkB9C,KAAI,SAACiD,GAAD,OAAqBA,EAAgBzD,QAAtFV,SAEFoE,EAAkBnE,sBAAW,sBAAC,sBAAAlC,EAAA,6DAClCyF,GAAa,GADqB,kBAG1BxD,IAH0B,6EAOhCwD,GAAa,GAPmB,0EASjC,CAACxD,IAEJ,OACE,cAAC0C,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAS2B,GAAG,OAAOlC,MAAO,CAAEmC,WAAY,IAAK3H,SAAU,QAAvD,SACGqF,EAAgB,IAAK,qBAExB,cAACe,EAAD,CAAWwB,IAAI,oBAAoBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACtE,eAAC7B,EAAD,WACE,cAACI,GAAD,CAAOd,MAAO,CAAED,MAAO,QAAvB,SAAkCF,EAAgB,IAAK,sBACvD,cAAC,EAAD,CAAoBD,YAAaA,IACjC,eAACkB,GAAD,CAAOd,MAAO,CAAED,MAAO,QAAvB,gBAAqCyB,EAAW5B,GAAa4C,QAAQ,SAEvE,eAAC9B,EAAD,WACE,cAACI,GAAD,CAAOd,MAAO,CAAED,MAAO,QAAvB,SAAkCF,EAAgB,IAAK,qBACvD,cAAC,EAAD,CAAmBM,YAAaA,IAChC,eAACW,GAAD,CAAOd,MAAO,CAAED,MAAO,QAAvB,gBAAqCyB,EAAWrB,GAAaqC,QAAQ,SAEvE,cAACtB,GAAD,UACGnE,EACC,cAAC,IAAD,CACE0F,GAAG,cACHC,SAAUb,EAAkBc,QAAU,GAAKvB,EAC3CwB,QAASX,EACTY,WAAS,EAJX,SAMGzB,EACGvB,EAAgB,IAAK,oBACrBA,EAAgB,IAAD,uBAAsBgC,EAAkBc,OAAxC,QAGrB,cAACG,EAAA,EAAD,CAAcD,WAAS,Y,UCtF7BE,GAAkBvC,YAAOC,IAAPD,CAAH,yEAKfwC,GAAMxC,IAAOG,IAAV,oJA0DMsC,GAlDG,WAChB,IAAMpD,EAAkBC,cAClBpE,EAAcJ,cACd4H,EAAgB5G,YAAiBN,eACjCmH,EAAQC,cACR5B,EAAWC,cACX4B,EAAa3H,EAAcA,EAAY4H,MAAMJ,GAAiB,IAAI9G,KAAU,GAC5EmH,EAAahC,YAAiB8B,GAC9BG,EAAYhC,EAASiC,MAAMJ,GAE7BK,EAAc,EAKlB,OAJIP,GAASA,EAAM,IAAMA,EAAM,GAAGO,cAChCA,EAAc,IAAItH,KAAU+G,EAAM,GAAGO,aAAa/C,IAAI,IAAIvE,KAAU,IAAIwF,IAAI,KAAKF,YAIjF,cAACqB,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASb,GAAG,OAAOlC,MAAO,CAAEmC,WAAY,IAAK3H,SAAU,QAAvD,SACGqF,EAAgB,IAAK,iBAExB,eAACmD,GAAD,WACE,cAAC,IAAD,CAAMxI,SAAS,OAAf,SAAuBqF,EAAgB,MAAO,gBAC9C,cAACxF,EAAA,EAAD,CAAWG,SAAS,OAAOF,MAAOiH,YAAiBiC,GAAYjJ,SAAU,EAAGE,OAAO,SAErF,eAACuI,GAAD,WACE,cAAC,IAAD,CAAMxI,SAAS,OAAf,SAAuBqF,EAAgB,IAAK,kBAC3CnE,GAAe,cAACrB,EAAA,EAAD,CAAWG,SAAS,OAAOF,MAAOiH,YAAiB7F,GAAcnB,SAAU,OAE7F,eAACyI,GAAD,WACE,cAAC,IAAD,CAAMxI,SAAS,OAAf,SAAuBqF,EAAgB,IAAK,kBAC5C,cAACxF,EAAA,EAAD,CAAWG,SAAS,OAAOF,MAAOiH,YAAiB2B,GAAgB3I,SAAU,OAE/E,eAACyI,GAAD,WACE,cAAC,IAAD,CAAMxI,SAAS,OAAf,SAAuBqF,EAAgB,MAAO,wBAC7C0D,GAAc,cAAClJ,EAAA,EAAD,CAAWG,SAAS,OAAOF,MAAOiJ,EAAYhJ,SAAU,OAEzE,eAACyI,GAAD,WACE,cAAC,IAAD,CAAMxI,SAAS,OAAf,SAAuBqF,EAAgB,IAAK,qBAC5C,cAAC,IAAD,CAAMrF,SAAS,OAAf,SAAuBkJ,OAEzB,eAACV,GAAD,WACE,cAAC,IAAD,CAAMxI,SAAS,OAAf,SAAuBqF,EAAgB,IAAK,gBAC5C,cAAC,IAAD,CAAMrF,SAAS,OAAf,8BC3DJmJ,GAA6BnD,YAAOC,IAAPD,CAAH,uGA+BjBoD,GAxBc,WAC3B,IAAM/D,EAAkBC,cAElB+D,EAAaC,cAGnB,OACE,cAACH,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASI,KAAK,KAAK7B,GAAG,OAAOlC,MAAO,CAAEmC,WAAY,IAAK3H,SAAU,QAAjE,SACGqF,EAAgB,IAAK,SAExB,qCAGE,cAACxF,EAAA,EAAD,CAAWC,MAAOuJ,EAAWnC,WAAYjH,OAAO,IAAIF,SAAU,IAE9D,cAAC,IAAD,CAAMwF,MAAM,OAAZ,SAAoBF,EAAgB,IAAK,yC,UCpB7CmE,GAAoBxD,YAAOC,IAAPD,CAAH,yEAuCRyD,IAlCHzD,IAAOG,IAAV,oJAQW,WAClB,IAAMd,EAAkBC,cAExB,OACE,cAACkE,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAS9B,GAAG,OAAOlC,MAAO,CAAEmC,WAAY,IAAK3H,SAAU,QAAvD,SACGqF,EAAgB,MAAO,mBAE1B,cAAC,KAAD,CACEqE,WAAY,CACVC,WAAY,UACZC,WAAY,aAEdC,QAAS,CACP9B,OAAQ,MACR+B,OAAQ,qBACRhC,MAAO,MACPvB,MAAO,iBChCbwD,GAAgB/D,YAAOC,IAAPD,CAAH,yEAKbwC,GAAMxC,IAAOG,IAAV,oJA0CM6D,GAlCC,WACU1E,cAAxB,IACMpE,EAAcJ,cACd4H,EAAgB5G,YAAiBN,eACjCmH,EAAQC,cACR5B,EAAWC,cACX4B,EAAa3H,EAAcA,EAAY4H,MAAMJ,GAAiB,IAAI9G,KAAU,GAC/DmF,YAAiB8B,GAClB7B,EAASiC,MAAMJ,GAOjC,OAJIF,GAASA,EAAM,IAAMA,EAAM,GAAGO,aAClB,IAAItH,KAAU+G,EAAM,GAAGO,aAAa/C,IAAI,IAAIvE,KAAU,IAAIwF,IAAI,KAAKF,WAIjF,cAAC6C,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASrC,GAAG,OAAOlC,MAAO,CAAEmC,WAAY,IAAK3H,SAAU,QAAvD,4BAGA,eAAC,GAAD,WACE,cAAC,IAAD,CAAMA,SAAS,OAAf,wBACA,cAACH,EAAA,EAAD,CAAWG,SAAS,OAAOF,MAAO,EAAGC,SAAU,EAAGE,OAAO,SAE3D,eAAC,GAAD,WACE,cAAC,IAAD,CAAMD,SAAS,OAAf,yBACCkB,GAAe,cAACrB,EAAA,EAAD,CAAWG,SAAS,OAAOF,MAAO,EAAGC,SAAU,aC7BnEkK,GAAOjE,IAAOG,IAAV,oNAYJ+D,GAAQlE,YAAOmE,IAAPnE,CAAH,8SAUP,qBAAGO,MAAkB6D,aAAaC,MAMlC,qBAAG9D,MAAkB6D,aAAaE,MA8CvBC,GAvCQ,WACGjF,cAAxB,IACMkF,EAAU,IAAIC,IACpB,EAAsBC,YAAc,MAAOC,KAA3C,mBAAOC,EAAP,UAQA,OANIA,GACEC,YAAUC,YAAMF,KAClBJ,EAAQO,IAAI,MAAOH,GAKrB,mCACE,eAACI,EAAA,EAAD,WACE,eAACf,GAAD,WACE,cAAC,IAAD,CAAOrC,IAAI,kCAAkCC,IAAI,OAAOC,MAAO,IAAKC,OAAQ,KAC5E,cAAC,IAAD,CAAMkD,GAAG,OAAOvD,GAAG,OAAnB,gEAKF,8BAEE,eAACwC,GAAD,WACE,cAACgB,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,gCACE,cAAC,GAAD,IACA,cAAC,GAAD","file":"static/js/13.4592f0bd.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '25px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useToast from 'hooks/useToast'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, autoharvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useVault } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleHarvest = useCallback(async () => {\n    try {\n      const txHash = await harvest(masterChefContract, farmPid, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      toastSuccess('Success', 'Harvesting transaction confirmed')\n      return txHash\n    } catch (e) {\n      toastError('An error occurred.', `Harvesting unsuccessful, please try again`)\n      return false\n    }\n  }, [account, dispatch, farmPid, masterChefContract, toastError, toastSuccess])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAutoHarvest = () => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const vaultContract = useVault()\n\n  const handleHarvest = useCallback(async () => {\n    await autoharvest(vaultContract, account)\n    // dispatch(updateUserPendingReward(sousId, account))\n    // dispatch(updateUserBalance(sousId, account))\n  }, [account, vaultContract])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCherry',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCherry',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO handle\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading mb=\"24px\" style={{ fontWeight: 500, fontSize: '30px' }}>\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label style={{ color: '#fff' }}>{TranslateString(544, 'SIGMA to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label style={{ color: '#fff' }}>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label style={{ color: '#fff' }}>{TranslateString(546, 'SIGMA in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label style={{ color: '#fff' }}>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting SIGMA')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let eggPerBlock = 0\n  if (farms && farms[0] && farms[0].eggPerBlock) {\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading mb=\"24px\" style={{ fontWeight: 500, fontSize: '30px' }}>\n          {TranslateString(534, 'SIGMA Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New SIGMA/block')}</Text>\n          <Text fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(999, 'Max Supply')}</Text>\n          <Text fontSize=\"14px\">150,000</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  margin-top: 12px;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\" style={{ fontWeight: 500, fontSize: '20px' }}>\n          {TranslateString(999, 'TVL')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"text\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading mb=\"24px\" style={{ fontWeight: 500, fontSize: '30px' }}>\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'sigmafarm',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n            theme: 'dark',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledLpStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst LpStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n\n  let eggPerBlock = 0\n  if (farms && farms[0] && farms[0].eggPerBlock) {\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledLpStats>\n      <CardBody>\n        <Heading mb=\"24px\" style={{ fontWeight: 500, fontSize: '20px' }}>\n          SIGMA LP Worth\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">SIGMA-USDC</Text>\n          <CardValue fontSize=\"14px\" value={0} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">SIGMA-MATIC</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={0} decimals={0} />}\n        </Row>\n      </CardBody>\n    </StyledLpStats>\n  )\n}\n\nexport default LpStats\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Cookies from 'universal-cookie'\nimport { Heading, Text, BaseLayout, Button, ToastContainer, Image } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useQueryParam, StringParam } from 'use-query-params'\nimport useToast from 'hooks/useToast'\nimport Page from 'components/layout/Page'\nimport Divider from 'views/Farms/components/Divider'\nimport { isAddress } from '../../utils/web3'\nimport rot13 from '../../utils/encode'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport SpecialCard from './components/SpecialCard'\nimport Background from '../Background'\nimport HomePageCountdown from '../HomePageCountdown'\nimport DexStats from './components/DexStats'\nimport LpStats from './components/LpStats'\n\nconst Hero = styled.div`\n  align-items: center;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 0px;\n  text-align: center;\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n  const cookies = new Cookies()\n  const [ref, setNum] = useQueryParam('ref', StringParam)\n\n  if (ref) {\n    if (isAddress(rot13(ref))) {\n      cookies.set('ref', ref)\n    }\n  }\n\n  return (\n    <>\n      <Page>\n        <Hero>\n          <Image src=\"/images/egg/LogoTextNewDark.png\" alt=\"logo\" width={250} height={52} />\n          <Text mt=\"16px\" mb=\"16px\">\n            Built by Sigma Farmers, Built for Sigma Farmers\n          </Text>\n        </Hero>\n\n        <div>\n          {/* <SpecialCard /> */}\n          <Cards>\n            <FarmStakingCard />\n            <TwitterCard />\n            <CakeStats />\n            <div>\n              <LpStats />\n              <TotalValueLockedCard />\n            </div>\n          </Cards>\n        </div>\n      </Page>\n      {/* <Background/> */}\n    </>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}