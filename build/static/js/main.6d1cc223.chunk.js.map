{"version":3,"sources":["contexts/ToastsContext/Provider.tsx","contexts/ToastsContext/Listener.tsx","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","hooks/useToast.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","state/actions.ts","contexts/Localisation/translationsContext.ts","components/layout/Page.tsx","components/layout/Container.tsx","config/constants/contracts.ts","config/constants/types.ts","utils/addressHelpers.ts","utils/multicall.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","style/Global.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["ToastsContext","createContext","undefined","ToastsProvider","children","useState","toasts","setToasts","toast","useCallback","title","description","type","action","prevToasts","id","kebabCase","currentToasts","filter","prevToast","Provider","value","clear","remove","toastError","toastTypes","DANGER","toastInfo","act","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","ToastListener","useToast","onRemove","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","isVault","masterchefABI","getVaultAddress","pid","info","userInfo","totalAllocPoint","eggPerBlock","tokenAmount","BigNumber","amount","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpStakedTotal","lpTokenRatio","quoteTokenAmount","comparedTo","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","vaultAddress","farm","lpContractAddress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","vaultCalls","vaultABI","vaultUserInfo","balanceOf","totalShares","parsedStakedBalances","stakedBalance","index","fetchFarmUserEarnings","rawEarnings","pendingCherry","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","console","log","farmAllowance","allowance","toastContext","useContext","Error","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","useFetch","url","options","React","response","route","ethereum","polyvertex","bitcoin","setData","axios","result","fetchData","err","usePriceBnbBusd","usePriceCakeBusd","usePriceWethBusd","output","usd","usePriceBtcBusd","usePriceRouteBusd","useTotalValue","bnbPrice","cakePrice","btcPrice","i","length","val","BNB","CAKE","BTC","SIGMA","plus","Infinity","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Page","styled","Container","theme","mediaQueries","sm","lg","cake","masterChef","wmatic","wbnb","lottery","lotteryNFT","mulltiCall","busd","dai","usdt","wbtc","weth","dfyn","referral","vault","PoolCategory","getCakeAddress","addresses","chainId","getMulticallAddress","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","getReferralAddress","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","pools","nonBnbPools","poolsConfig","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","stakedBalances","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","exchange","WMATIC","WETH","USDT","DAI","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","GlobalStyle","createGlobalStyle","Home","lazy","Farms","Referral","Presale","Dividend","NotFound","didAskToJoinTelegram","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Math","text","ReactRouterRoute","Route","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","isAddress","utils"],"mappings":"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","file":"static/js/main.6d1cc223.chunk.js","sourcesContent":["import React, { createContext, ReactNode, useCallback, useState } from 'react'\nimport { kebabCase } from 'lodash'\nimport { Toast, toastTypes } from '@pancakeswap-libs/uikit'\nimport { ToastContextApi } from './types'\n\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\nexport interface ToastAction {\n  text: string\n  url: string\n}\nexport const ToastsProvider: React.FC = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\n\n  const toast = useCallback(\n    ({ title, description, type, action }: Omit<Toast, 'id'>) => {\n      setToasts((prevToasts) => {\n        const id = kebabCase(title)\n        // Remove any existing toasts with the same id\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\n\n        return [\n          {\n            id,\n            title,\n            description,\n            type,\n            action,\n          },\n          ...currentToasts,\n        ]\n      })\n    },\n    [setToasts],\n  )\n\n  const toastError = (title: string, description?: string) => {\n    return toast({ title, description, type: toastTypes.DANGER })\n  }\n  const toastInfo = (title: string, description?: string, act?: ToastAction) => {\n    return toast({ title, description, type: toastTypes.INFO, action: act })\n  }\n\n  const toastSuccess = (title: string, description?: string, act?: ToastAction) => {\n    return toast({ title, description, type: toastTypes.SUCCESS, action: act })\n  }\n  const toastWarning = (title: string, description?: string) => {\n    return toast({ title, description, type: toastTypes.WARNING })\n  }\n  const clear = () => setToasts([])\n  const remove = (id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\n  }\n\n  return (\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\n      {children}\n    </ToastsContext.Provider>\n  )\n}\n","import React from 'react'\nimport { ToastContainer } from '@pancakeswap-libs/uikit'\nimport useToast from 'hooks/useToast'\n\nconst ToastListener = () => {\n  const { toasts, remove } = useToast()\n\n  const handleRemove = (id: string) => remove(id)\n\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\n}\n\nexport default ToastListener\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress, getVaultAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n        await multicall(erc20, calls)\n\n      const [info, userInfo, totalAllocPoint, eggPerBlock] = farmConfig.isVault\n        ? await multicall(masterchefABI, [\n            {\n              address: getMasterChefAddress(),\n              name: 'poolInfo',\n              params: [0],\n            },\n            {\n              address: getMasterChefAddress(),\n              name: 'userInfo',\n              params: [0, getVaultAddress()],\n            },\n            {\n              address: getMasterChefAddress(),\n              name: 'totalAllocPoint',\n            },\n            {\n              address: getMasterChefAddress(),\n              name: 'CherryPerBlock',\n            },\n          ])\n        : await multicall(masterchefABI, [\n            {\n              address: getMasterChefAddress(),\n              name: 'poolInfo',\n              params: [farmConfig.pid],\n            },\n            {\n              address: getMasterChefAddress(),\n              name: 'userInfo',\n              params: [farmConfig.pid, getVaultAddress()],\n            },\n            {\n              address: getMasterChefAddress(),\n              name: 'totalAllocPoint',\n            },\n            {\n              address: getMasterChefAddress(),\n              name: 'CherryPerBlock',\n            },\n          ])\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let lpStakedTotal\n      let tokenPriceVsQuote\n\n      if (farmConfig.isTokenOnly) {\n        if (farmConfig.isVault) {\n          tokenAmount = new BigNumber(userInfo.amount).div(new BigNumber(10).pow(tokenDecimals))\n        } else {\n          tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        }\n\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP)\n            .div(new BigNumber(10).pow(quoteTokenDecimals))\n            .div(new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)))\n        }\n\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n\n        lpStakedTotal = tokenAmount\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpStakedTotal = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(quoteTokenDecimals))\n      }\n\n      // console.log('debug', farmConfig.pid, tokenPriceVsQuote.toJSON())\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n        lpStakedTotal: lpStakedTotal.toJSON(),\n        tokenDecimals: new BigNumber(tokenDecimals).toNumber(),\n        quoteTokenDecimals: new BigNumber(quoteTokenDecimals).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress, getVaultAddress } from 'utils/addressHelpers'\nimport vaultABI from 'config/abi/vault.json'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n  const vaultAddress = getVaultAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    if (farm.isVault) {\n      return { address: lpContractAddress, name: 'allowance', params: [account, vaultAddress] }\n    }\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n  const vaultAddress = getVaultAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const vaultCalls = [\n    {\n      address: vaultAddress,\n      name: 'userInfo',\n      params: [account],\n    },\n    {\n      address: vaultAddress,\n      name: 'balanceOf',\n    },\n    {\n      address: vaultAddress,\n      name: 'totalShares',\n    },\n  ]\n  const [vaultUserInfo, balanceOf, totalShares] = await multicall(vaultABI, vaultCalls)\n\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance, index) => {\n    if (index === 9) {\n      return new BigNumber(vaultUserInfo[2]._hex)\n        .times(new BigNumber(balanceOf[0]._hex))\n        .div(new BigNumber(totalShares[0]._hex))\n        .toJSON()\n    }\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n  const vaultAddress = getVaultAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingCherry',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n\n  const vaultCalls = [\n    {\n      address: vaultAddress,\n      name: 'userInfo',\n      params: [account],\n    },\n    {\n      address: vaultAddress,\n      name: 'calculateTotalpendingCherryRewards',\n    },\n    {\n      address: vaultAddress,\n      name: 'totalShares',\n    },\n  ]\n  const [vaultUserInfo, pendingCherry, totalShares] = await multicall(vaultABI, vaultCalls)\n  const parsedEarnings = rawEarnings.map((earnings, index) => {\n    if (index === 9) {\n      return new BigNumber(vaultUserInfo[2]._hex)\n        .times(new BigNumber(pendingCherry[0]._hex))\n        .div(new BigNumber(totalShares[0]._hex))\n        .toJSON()\n    }\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n  console.log(userFarmAllowances)\n  console.log(userFarmTokenBalances)\n  console.log(userStakedBalances)\n  console.log(userFarmEarnings)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n  console.log(arrayOfUserDataObjects)\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { useContext } from 'react'\nimport { ToastsContext } from 'contexts/ToastsContext'\n\nconst useToast = () => {\n  const toastContext = useContext(ToastsContext)\n\n  if (toastContext === undefined) {\n    throw new Error('Toasts context undefined')\n  }\n\n  return toastContext\n}\n\nexport default useToast\n","import BigNumber from 'bignumber.js'\nimport axios from 'axios'\nimport React, { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\nconst useFetch = (url, options) => {\n  const [data, setData] = React.useState({\n    response: null,\n    route: null,\n    ethereum: null,\n    polyvertex: null,\n    bitcoin: null,\n  })\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(url)\n\n      setData(result.data)\n    }\n\n    fetchData()\n  }, [url])\n  const err = null\n  return { data, err }\n}\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 11 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 1 // BUSD-SIGMA LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(10) : ZERO\n}\nexport const usePriceWethBusd = (): BigNumber => {\n  const url = 'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd'\n  const { data, err } = useFetch(url, null)\n  let output = new BigNumber(0)\n  if (data.ethereum) {\n    output = new BigNumber(data.ethereum.usd)\n  }\n  return output\n}\nexport const usePriceBtcBusd = (): BigNumber => {\n  const url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd'\n  const { data, err } = useFetch(url, null)\n  let output = new BigNumber(0)\n  if (data.bitcoin) {\n    output = new BigNumber(data.bitcoin.usd)\n  }\n  return output\n}\nexport const usePriceRouteBusd = (): BigNumber => {\n  const url = 'https://api.coingecko.com/api/v3/simple/price?ids=route&vs_currencies=usd'\n  const { data, err } = useFetch(url, null)\n  let output = new BigNumber(0)\n  if (data.route) {\n    output = new BigNumber(data.route.usd)\n  }\n  return output\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  const ethPrice = usePriceWethBusd()\n  const btcPrice = usePriceWethBusd()\n  let value = new BigNumber(0)\n\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.BTC) {\n        val = btcPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.tokenSymbol === QuoteToken.SIGMA) {\n        val = new BigNumber(0)\n      } else {\n        val = farm.lpTotalInQuoteToken // USDC etc\n      }\n      value = value.plus(val)\n    }\n  }\n\n  const output = value.toString() === Infinity.toString() ? new BigNumber(0) : value\n  return output\n}\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","export default {\n  cake: {\n    // LEAFEX\n    137: '0xbD01698Ab485A7b8092A4e32B9c8B1939F6D2708', // SIGMA LIVE\n    80001: '0x72572CCf5208b59f4BcC14e6653d8c31Cd1fC5a0',\n  },\n  masterChef: {\n    137: '0x15d073a4a6D452a95fB9B3d80cF9e3Dc75BbFDD8', // LIVE\n    80001: '0x9cCA28d98EC895c50C266b7f138dD6316aADB52A',\n  },\n  wmatic: {\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC\n    80001: '',\n  },\n\n  wbnb: {\n    137: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC\n    80001: '',\n  },\n  lottery: {\n    137: '',\n    80001: '',\n  },\n  lotteryNFT: {\n    137: '',\n    80001: '',\n  },\n  mulltiCall: {\n    137: '0x11ce4B23bD875D7F5C6a31084f55fDe1e9A87507',\n    80001: '0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc',\n  },\n  busd: {\n    137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', // USDC\n    80001: '',\n  },\n  dai: {\n    137: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063', // DAI\n    80001: '',\n  },\n  usdt: {\n    137: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f', // USDT\n    80001: '',\n  },\n  wbtc: {\n    137: '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6', // wbtc\n    80001: '',\n  },\n  weth: {\n    137: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619', // weth\n    80001: '',\n  },\n  route: {\n    137: '0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4', // route\n    80001: '',\n  },\n  dfyn: {\n    137: '0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97', // dfyn\n    80001: '',\n  },\n  referral: {\n    137: '0x714b2e10c4836aCC190D7807865A3db43081EAC8', // referral\n    80001: '',\n  },\n  vault: {\n    137: '0xB62E8C9f46d99525e83B1100Bab8E7381F2B4B43', // vault\n    80001: '',\n  },\n\n  // TIMELOCK: 0x8eC313CFbc877a9E0559c8e80763a9a058C28C69\n}\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'USDT' = 'USDT',\n  'WETH' = 'WETH',\n  'SIGMA' = 'SIGMA',\n  'BTC' = 'BTC',\n  'ROUTE' = 'ROUTE',\n  'DFYN' = 'DFYN',\n  'DAI' = 'DAI',\n  'WMATIC' = 'WMATIC',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  80001?: string\n  137: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isVault?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n  exchange?: string\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getVaultAddress = () => {\n  return addresses.vault[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\nexport const getReferralAddress = () => {\n  return addresses.referral[chainId]\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     80001: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     137: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     80001: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     137: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract(masterChefABI as unknown as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingCherry('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'CHERRY-USDC',\n    lpAddresses: {\n      80001: '',\n      137: '0x18Bf5425C38A1913E0acA46Dd8cB584C4815eAC9',\n    },\n    tokenSymbol: 'CHERRY',\n    tokenAddresses: {\n      80001: '',\n      137: '0x5cb984817d5a1e3259c2bbc3a0ebdfe6bd1de74b',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    exchange: 'QuickSwap',\n  },\n  {\n    pid: 2,\n    risk: 5,\n    lpSymbol: 'CHERRY-WMATIC',\n    lpAddresses: {\n      80001: '',\n      137: '0x040c8C50b327080476bC67034cE085933842BE76',\n    },\n    tokenSymbol: 'CHERRY',\n    tokenAddresses: {\n      80001: contracts.wmatic[80001],\n      137: contracts.wmatic[137],\n    },\n    quoteTokenSymbol: QuoteToken.WMATIC,\n    quoteTokenAdresses: contracts.wmatic,\n    exchange: 'QuickSwap',\n  },\n  {\n    pid: 11,\n    risk: 5,\n    lpSymbol: 'WMATIC-USDC',\n    lpAddresses: {\n      80001: '',\n      137: '0x6e7a5FAFcec6BB1e78bAE2A1F0B612012BF14827',\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      80001: contracts.wmatic[80001],\n      137: contracts.wmatic[137],\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    exchange: 'QuickSwap',\n  },\n\n  {\n    pid: 12,\n    risk: 12,\n    lpSymbol: 'WETH-USDC',\n    lpAddresses: {\n      80001: '',\n      137: '0x853Ee4b2A13f8a742d64C8F088bE7bA2131f670d',\n    },\n    tokenSymbol: 'WETH',\n    tokenAddresses: {\n      80001: '',\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    exchange: 'QuickSwap',\n  },\n\n  {\n    pid: 13,\n    risk: 5,\n    lpSymbol: 'WMATIC-WETH',\n    lpAddresses: {\n      80001: '',\n      137: '0xadbF1854e5883eB8aa7BAf50705338739e558E5b',\n    },\n    tokenSymbol: 'WMATIC',\n    tokenAddresses: {\n      80001: contracts.wmatic[80001],\n      137: contracts.wmatic[137],\n    },\n    quoteTokenSymbol: QuoteToken.WETH,\n    quoteTokenAdresses: contracts.weth,\n    exchange: 'QuickSwap',\n  },\n\n  {\n    pid: 14,\n    risk: 5,\n    lpSymbol: 'WBTC-USDC',\n    lpAddresses: {\n      80001: '',\n      137: '0xF6a637525402643B0654a54bEAd2Cb9A83C8B498',\n    },\n    tokenSymbol: 'WBTC',\n    tokenAddresses: {\n      80001: contracts.wbtc[80001],\n      137: contracts.wbtc[137],\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    exchange: 'QuickSwap',\n  },\n  {\n    pid: 15,\n    risk: 5,\n    lpSymbol: 'WBTC-WETH',\n    lpAddresses: {\n      80001: '',\n      137: '0xdC9232E2Df177d7a12FdFf6EcBAb114E2231198D', // vert-weth\n    },\n    tokenSymbol: 'WBTC',\n    tokenAddresses: {\n      80001: '',\n      137: contracts.cake[137], // vert\n    },\n    quoteTokenSymbol: QuoteToken.WETH,\n    quoteTokenAdresses: contracts.weth,\n    exchange: 'QuickSwap',\n  },\n  {\n    pid: 16,\n    risk: 3,\n    lpSymbol: 'USDC-USDT',\n    lpAddresses: {\n      80001: '',\n      137: '0x2cF7252e74036d1Da831d11089D326296e64a728',\n    },\n    tokenSymbol: 'USDC',\n    tokenAddresses: {\n      80001: contracts.busd[80001],\n      137: contracts.busd[137],\n    },\n    quoteTokenSymbol: QuoteToken.USDT,\n    quoteTokenAdresses: contracts.usdt,\n    exchange: 'QuickSwap',\n  },\n  {\n    pid: 17,\n    risk: 3,\n    lpSymbol: 'USDC-DAI',\n    lpAddresses: {\n      80001: '',\n      137: '0xf04adBF75cDFc5eD26eeA4bbbb991DB002036Bdd',\n    },\n    tokenSymbol: 'USDC',\n    tokenAddresses: {\n      80001: '',\n      137: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    },\n    quoteTokenSymbol: QuoteToken.DAI,\n    quoteTokenAdresses: contracts.dai,\n    exchange: 'QuickSwap',\n  },\n  {\n    pid: 0,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'CHERRY',\n    lpAddresses: {\n      80001: '',\n      137: '0xbD01698Ab485A7b8092A4e32B9c8B1939F6D2708', // CHERRY-USDC LP\n    },\n    tokenSymbol: 'CHERRY',\n    tokenAddresses: {\n      80001: '',\n      137: '0xbD01698Ab485A7b8092A4e32B9c8B1939F6D2708',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 5,\n    isTokenOnly: true,\n    isVault: true,\n    lpSymbol: 'CHERRY',\n    lpAddresses: {\n      80001: '',\n      137: '0xbD01698Ab485A7b8092A4e32B9c8B1939F6D2708', // CHERRY-USDC LP\n    },\n    tokenSymbol: 'CHERRY',\n    tokenAddresses: {\n      80001: '',\n      137: '0xbD01698Ab485A7b8092A4e32B9c8B1939F6D2708',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://quickswap.exchange/#/swap',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://quickswap.exchange/#/pool',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/pools',\n  },\n  {\n    label: 'Dividends',\n    icon: 'BondsIcon',\n    href: '/dividends',\n  },\n  {\n    label: 'Referral',\n    icon: 'CommunityIcon',\n    href: '/referral',\n  },\n\n  {\n    label: 'Presale',\n    icon: 'NftIcon',\n    href: '/presale',\n  },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'Chart',\n        href: 'https://dex.guru/',\n      },\n      {\n        label: 'VFAT Tools',\n        href: 'https://vfat.tools/',\n      },\n      {\n        label: 'DappRadar',\n        href: 'https://dappradar.com/',\n      },\n      {\n        label: 'CoinGecko',\n        href: 'https://www.coingecko.com/',\n      },\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Docs',\n        href: '',\n      },\n      {\n        label: 'GitHub',\n        href: 'https://github.com/',\n      },\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://quickchart.app/token/0x5cb984817d5a1e3259c2bbc3a0ebdfe6bd1de74b\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Poppins', sans-serif;\n    font-weight: normal;\n    font-style: normal;\n    line-height: 18px;\n    \n  }\n  body {\n    background-image: url('/images/egg/background.png');\n    background-size: contain; \n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n  [role=button] a{\n    color:white!important;\n  }\n  .audit_image{\n    position:fixed;\n    bottom:15px;\n    right:20px;\n    z-index:999;\n    width:250px;\n  }\n`\n\nexport default GlobalStyle\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Link, ResetCSS } from '@pancakeswap-libs/uikit'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { QueryParamProvider } from 'use-query-params'\nimport { useFetchPublicData } from 'state/hooks'\nimport Image from 'views/Nft/components/Image'\nimport styled from 'styled-components'\nimport { ToastListener } from './contexts/ToastsContext'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\nimport GlobalStyle from './style/Global'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst Referral = lazy(() => import('./views/Referral'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\nconst Presale = lazy(() => import('./views/Presale'))\nconst Dividend = lazy(() => import('./views/Jungles'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\nlet didAskToJoinTelegram = false\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  const { toastSuccess } = useToast()\n  const v = Math.random()\n  if (v < 0.3 && !didAskToJoinTelegram) {\n    const action = { text: 'Join now', url: 'https://t.me/sigmafarm' }\n    toastSuccess('Have you joined our Telegram community?', 'Come chat with us!', action)\n  }\n  didAskToJoinTelegram = true\n\n  return (\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <ResetCSS />\n        <GlobalStyle />\n        <Menu>\n          <Suspense fallback={<PageLoader />}>\n            <Switch>\n              <Route path=\"/\" exact>\n                <Home />\n              </Route>\n              <Route path=\"/farms\">\n                <Farms />\n              </Route>\n              <Route path=\"/pools\">\n                <Farms tokenMode />\n              </Route>\n              <Route path=\"/referral\">\n                <Referral />\n              </Route>\n              <Route path=\"/dividends\">\n                <Dividend />\n              </Route>\n              <Route path=\"/presale\">\n                <Presale />\n              </Route>\n              {/* <Route path=\"/ifo\"> */}\n              {/*  <Ifos /> */}\n              {/* </Route> */}\n              {/* <Route path=\"/nft\"> */}\n              {/*  <Nft /> */}\n              {/* </Route> */}\n              {/* Redirect */}\n              {/* <Route path=\"/staking\"> */}\n              {/*  <Redirect to=\"/pools\" /> */}\n              {/* </Route> */}\n              {/* <Route path=\"/syrup\"> */}\n              {/*  <Redirect to=\"/pools\" /> */}\n              {/* </Route> */}\n              {/* 404 */}\n              <Route component={NotFound} />\n            </Switch>\n          </Suspense>\n        </Menu>\n        {/* <NftGlobalNotification /> */}\n        <ToastListener />\n      </QueryParamProvider>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport { ToastsProvider } from 'contexts/ToastsContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <ToastsProvider>\n          <LanguageContextProvider>\n            <bsc.UseWalletProvider\n              chainId={chainId}\n              connectors={{\n                walletconnect: { rpcUrl },\n                bsc,\n              }}\n            >\n              <BlockContextProvider>\n                <RefreshContextProvider>\n                  <ModalProvider>{children}</ModalProvider>\n                </RefreshContextProvider>\n              </BlockContextProvider>\n            </bsc.UseWalletProvider>\n          </LanguageContextProvider>\n        </ToastsProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL || 'https://rpc-mainnet.maticvigil.com', {\n  timeout: 10000,\n} as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(abi as unknown as AbiItem, address, contractOptions)\n}\n\nconst isAddress = (address: string) => {\n  return Web3.utils.isAddress(address)\n}\n\nexport { getWeb3, getContract, httpProvider, isAddress }\n"],"sourceRoot":""}