{"version":3,"sources":["views/Home/components/CardValue.tsx","hooks/useTokenBalance.ts","hooks/useApprove.ts","components/Input/Input.tsx","components/Spacer/Spacer.tsx","views/Presale/components/Hero.tsx","views/Presale/components/LabelButton.tsx","components/Input/BalanceInput.tsx","views/Presale/components/ContributeModal.tsx","views/Presale/components/PresaleContribute.tsx","hooks/useAllowance.ts","views/Presale/Presale.tsx"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useApprove","lpContract","dispatch","useDispatch","masterChefContract","useMasterchef","useToast","toastError","toastSuccess","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useAutoApprove","vaultContrat","useVault","usePreSaleApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","StyledSpacer","size","Spacer","s","useContext","ThemeContext","Title","Heading","attrs","as","StyledHero","Text","secondary","gradients","bubblegum","StyledContainer","Container","mediaQueries","sm","lg","Hero","TranslateString","useI18n","ButtonWrapper","borderColor","LabelButton","label","buttonLabel","onClick","disabled","color","bold","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","BalanceInput","max","symbol","onSelectMax","useMax","multipliedBy","toString","toLocaleString","ContributeModal","currency","contract","currencyAddress","onDismiss","setValue","pendingTx","setPendingTx","getFullDisplayBalance","title","e","currentTarget","justifyContent","mb","fullWidth","variant","mr","buy","times","pow","href","style","margin","StyledPreSaleCard","Card","Row","RowItem","PresaleContribute","address","status","raisingAmount","tokenDecimals","claimTokenBalance","setClaimTokenBalance","claimed","setClaimed","amount","setAmount","isActive","setActive","total","setTotal","unclaimToken","setUnclaimToken","ownToken","setOwnToken","totalSoldToken","setTotalSoldToken","leftToken","setLeftToken","contractRaisingToken","useERC20","console","log","allowance","dependency","setAllowance","fetch","usePreSaleAllowance","useModal","onPresentContributeModal","getTokensUnclaimed","claimActive","_claimed","getTokensOwned","_amount","saleActive","_active","getSIGMATokensLeft","_leftToken","_unclaimToken","_ownToken","getTotalTokensSold","_totalSoldToken","_total","claim","claimTokens","isFinished","textAlign","error","UnlockButton","getBalanceNumber","toFixed","Presale","usePreSaleContract","Page"],"mappings":"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","file":"static/js/10.2bd603de.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '25px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport useToast from 'hooks/useToast'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery, useVault } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      toastSuccess('Success', `Got approval!`)\n      return tx\n    } catch (e) {\n      toastError('An error occurred.', `Did not get approval, please try again`)\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract, toastError, toastSuccess])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a AutoPool\nexport const useAutoApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const vaultContrat = useVault()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, vaultContrat, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      toastSuccess('Success', `Got approval!`)\n      return tx\n    } catch (e) {\n      toastError('An error occurred.', `Did not get approval, please try again`)\n      return false\n    }\n  }, [account, dispatch, lpContract, vaultContrat, toastError, toastSuccess])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport const usePreSaleApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: 'white';\n  margin-bottom: 24px;\n  font-size: 32px;\n`\n\nconst Blurb = styled(Text)`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background-image: linear-gradient(180deg, #53dee9 0%, #1fc7d4 100%);\n  // background-image: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 40px;\n  padding-top: 40px;\n  display: flex;\n  flex-direction: row;\n`\n\nconst StyledContainer = styled(Container)`\n  flex: 1;\n  padding-right: 0;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <Title>{TranslateString(20000, 'PreSale')}</Title>\n        {/* <Blurb>{TranslateString(999, `Share the referral link below to invite your friends and earn 3% of your friends' earnings FOREVER!`)}</Blurb> */}\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React, { ButtonHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { Button, Text } from '@pancakeswap-libs/uikit'\n\ninterface Props extends ButtonHTMLAttributes<HTMLButtonElement> {\n  value: string\n  label?: string\n  buttonLabel: string\n  disabled?: boolean\n}\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: solid 1px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  border-color: ${({ theme }) => theme.colors.borderColor};\n  padding-left: 16px;\n`\n\nconst LabelButton: React.FC<Props> = ({ value, label, buttonLabel, onClick, disabled = false }) => {\n  return (\n    <div>\n      {label && (\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {label}\n        </Text>\n      )}\n      <ButtonWrapper>\n        <Text bold fontSize=\"20px\">\n          {value}\n        </Text>\n        <Button onClick={onClick} disabled={disabled}>\n          {buttonLabel}\n        </Button>\n      </ButtonWrapper>\n    </div>\n  )\n}\n\nexport default LabelButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { BigNumber } from 'bignumber.js'\nimport Input, { InputProps } from './Input'\n\ninterface Props extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nconst BalanceInput: React.FC<Props> = ({ max, symbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n  let useMax = max\n  if (symbol === 'USDT' || symbol === 'USDC') {\n    useMax = new BigNumber(max).multipliedBy('1000000000000').toString()\n  } else if (symbol === 'WBTC') {\n    useMax = new BigNumber(max).multipliedBy('10000000000').toString()\n  }\n  return (\n    <div>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${useMax.toLocaleString()} ${symbol} Available`)}</StyledMaxText>\n    </div>\n  )\n}\n\nexport default BalanceInput\n","import React, { useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { Modal, Button, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\nimport BalanceInput from 'components/Input/BalanceInput'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface Props {\n  currency: string\n  contract: any\n  currencyAddress: string\n  onDismiss?: () => void\n}\n\nconst ContributeModal: React.FC<Props> = ({ currency, contract, currencyAddress, onDismiss }) => {\n  const [value, setValue] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const balance = getFullDisplayBalance(useTokenBalance(currencyAddress), 6)\n\n  return (\n    <Modal title={`Contribute ${currency}`} onDismiss={onDismiss}>\n      <BalanceInput\n        value={value}\n        onChange={(e) => setValue(e.currentTarget.value)}\n        symbol={currency}\n        max={balance}\n        onSelectMax={() => setValue(balance.toString())}\n      />\n      <Flex justifyContent=\"space-between\" mb=\"24px\">\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss} mr=\"8px\">\n          Cancel\n        </Button>\n        <Button\n          fullWidth\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await contract.methods.buy(new BigNumber(value).times(new BigNumber(10).pow(6)).toString(), account).call()\n\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          Confirm\n        </Button>\n      </Flex>\n      <LinkExternal\n        href=\"https://exchange.pancakeswap.finance/#/add/ETH/0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\"\n        style={{ margin: 'auto' }}\n      >\n        {`Get ${currency}`}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","import React, { useState, useEffect } from 'react'\nimport { useModal, Button, Heading, Card, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Contract } from 'web3-eth-contract'\nimport { useERC20 } from 'hooks/useContract'\nimport { IfoStatus } from 'config/constants/types'\nimport UnlockButton from 'components/UnlockButton'\nimport { usePreSaleApprove } from 'hooks/useApprove'\nimport { usePreSaleAllowance } from 'hooks/useAllowance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport CardValue from 'views/Home/components/CardValue'\nimport Spacer from 'components/Spacer'\nimport LabelButton from './LabelButton'\nimport ContributeModal from './ContributeModal'\n\nconst StyledPreSaleCard = styled(Card)`\n  padding: 32px 16px 16px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 437px;\n  width: 100%;\n  border-radius: 16px;\n  margin-top: 16px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 32px 16px 16px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 437px;\n    width: 100%;\n    border-radius: 16px;\n  }\n`\nconst Row = styled.div`\n  display: block;\n  padding-top: 10px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: flex;\n    padding-top: 24px;\n  }\n`\nconst RowItem = styled.div`\n  display: flex;\n  padding-top: 16px;\n`\n\nexport interface Props {\n  address: string\n  currency: string\n  currencyAddress: string\n  contract: Contract\n  status?: IfoStatus\n  raisingAmount?: BigNumber\n  tokenDecimals: number\n}\n\nconst PresaleContribute: React.FC<Props> = ({\n  address,\n  currency,\n  currencyAddress,\n  contract,\n  status,\n  raisingAmount,\n  tokenDecimals,\n}) => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const [claimTokenBalance, setClaimTokenBalance] = useState(new BigNumber(0))\n  const [claimed, setClaimed] = useState(false)\n  const [amount, setAmount] = useState(new BigNumber(0))\n  const [isActive, setActive] = useState(true)\n  const { account } = useWallet()\n  const [total, setTotal] = useState(new BigNumber(0))\n  const [unclaimToken, setUnclaimToken] = useState(new BigNumber(0))\n  const [ownToken, setOwnToken] = useState(new BigNumber(0))\n  const [totalSoldToken, setTotalSoldToken] = useState(new BigNumber(0))\n  const [leftToken, setLeftToken] = useState(new BigNumber(0))\n  const contractRaisingToken = useERC20(currencyAddress)\n  console.log('_debug', contractRaisingToken)\n  const allowance = usePreSaleAllowance(contractRaisingToken, address, pendingTx)\n  const onApprove = usePreSaleApprove(contractRaisingToken, address)\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal currency={currency} contract={contract} currencyAddress={currencyAddress} />,\n  )\n\n  const TranslateString = useI18n()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const balance = new BigNumber(await contract.methods.getTokensUnclaimed().call())\n      const _claimed = await contract.methods.claimActive().call()\n      const _amount = await contract.methods.getTokensOwned().call()\n      const _active = await contract.methods.saleActive().call()\n      const _leftToken = await contract.methods.getSIGMATokensLeft().call()\n      const _unclaimToken = await contract.methods.getTokensUnclaimed().call()\n      const _ownToken = await contract.methods.getTokensOwned().call()\n      const _totalSoldToken = await contract.methods.getTotalTokensSold().call()\n      const _total = _totalSoldToken + _leftToken\n\n      setClaimed(_claimed)\n      setClaimTokenBalance(balance)\n      setAmount(_amount)\n      setActive(_active)\n      setLeftToken(_leftToken)\n      setUnclaimToken(_unclaimToken)\n      setOwnToken(_ownToken)\n      setTotalSoldToken(_totalSoldToken)\n      setTotal(_total)\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, contract.methods, pendingTx])\n\n  // if (allowance === null) {\n  //   return null\n  // }\n\n  const claim = async () => {\n    setPendingTx(true)\n    await contract.methods.claimTokens(account).call()\n    setPendingTx(false)\n  }\n  const isFinished = false\n  console.log('_debug', isActive)\n\n  return (\n    <>\n      {!isActive && (\n        <Heading size=\"lg\" style={{ textAlign: 'center' }}>\n          PreSale is not active\n        </Heading>\n      )}\n      <Row>\n        <StyledPreSaleCard>\n          <Heading size=\"lg\" mb=\"24px\" style={{ textAlign: 'center' }}>\n            Buy{' '}\n          </Heading>\n          {account && allowance <= 0 && (\n            <Button\n              fullWidth\n              disabled={pendingTx || isFinished}\n              onClick={async () => {\n                try {\n                  setPendingTx(true)\n                  await onApprove()\n                  setPendingTx(false)\n                } catch (e) {\n                  setPendingTx(false)\n                  console.error(e)\n                }\n              }}\n            >\n              Approve\n            </Button>\n          )}\n          {!account && <UnlockButton fullWidth />}\n          {account && allowance > 0 && (\n            <LabelButton\n              disabled={pendingTx || claimed || !(isActive || isFinished)}\n              buttonLabel=\"Contribute\"\n              label={isFinished ? 'Your tokens to claim' : `Your contribution (${currency})`}\n              value={\n                // eslint-disable-next-line no-nested-ternary\n                isFinished\n                  ? claimed\n                    ? 'Claimed'\n                    : getBalanceNumber(claimTokenBalance, tokenDecimals).toFixed(4)\n                  : getBalanceNumber(new BigNumber(amount)).toFixed(4)\n              }\n              onClick={onPresentContributeModal}\n            />\n          )}\n        </StyledPreSaleCard>\n        <Spacer size=\"sm\" />\n        <StyledPreSaleCard>\n          <Heading size=\"lg\" mb=\"24px\" style={{ textAlign: 'center' }}>\n            Claim{' '}\n          </Heading>\n\n          {!account && <UnlockButton fullWidth />}\n          {account && (\n            <LabelButton\n              disabled={\n                pendingTx ||\n                claimed ||\n                claimTokenBalance <= new BigNumber(0) ||\n                allowance <= 0 ||\n                !(isActive || isFinished)\n              }\n              buttonLabel=\"Claim\"\n              label=\"Your tokens to claim (Sigma)\"\n              value={\n                // eslint-disable-next-line no-nested-ternary\n                isFinished\n                  ? claimed\n                    ? 'Claimed'\n                    : getBalanceNumber(claimTokenBalance, tokenDecimals).toFixed(4)\n                  : getBalanceNumber(new BigNumber(amount)).toFixed(4)\n              }\n              onClick={claim}\n            />\n          )}\n        </StyledPreSaleCard>\n      </Row>\n      <Row>\n        <StyledPreSaleCard>\n          <Heading size=\"lg\" mb=\"24px\" style={{ textAlign: 'center' }}>\n            Info{' '}\n          </Heading>\n          <hr />\n          <RowItem>\n            <Text mr=\"16px\">Purchased Sigma:</Text>\n            <CardValue value={getBalanceNumber(ownToken, 6)} decimals={0} fontSize=\"16px\" />\n          </RowItem>\n          <RowItem>\n            <Text mr=\"16px\">Unclaimed Sigma:</Text>\n            <CardValue value={getBalanceNumber(unclaimToken, 6)} decimals={0} fontSize=\"16px\" />\n          </RowItem>\n          <hr />\n          <RowItem>\n            <Text mr=\"16px\">Total Sigma:</Text>\n            <CardValue value={getBalanceNumber(total, 6)} decimals={0} fontSize=\"16px\" />\n          </RowItem>\n          <RowItem>\n            <Text mr=\"16px\">Total Sigma Sold:</Text>\n            <CardValue value={getBalanceNumber(totalSoldToken, 6)} decimals={0} fontSize=\"16px\" />\n          </RowItem>\n          <hr />\n          <RowItem>\n            <Text mr=\"16px\" color=\"warning\">\n              Sigma Left:\n            </Text>\n            <CardValue value={getBalanceNumber(leftToken, 6)} decimals={0} fontSize=\"18px\" />\n          </RowItem>\n        </StyledPreSaleCard>\n        <Spacer size=\"sm\" />\n        <StyledPreSaleCard>\n          <Heading size=\"lg\" mb=\"24px\" style={{ textAlign: 'center' }}>\n            PreSale{' '}\n          </Heading>\n          <RowItem>\n            <Text fontSize=\"18px\" mr=\"16px\">\n              - Sigma Presale Price:{' '}\n            </Text>\n            <CardValue fontSize=\"18px\" value={0.1} decimals={1} prefix=\"$\" />\n          </RowItem>\n          <RowItem>\n            <Text fontSize=\"18px\" mr=\"16px\">\n              - Sigma Postsale Price:{' '}\n            </Text>\n            <CardValue fontSize=\"18px\" value={0.3} decimals={1} prefix=\"$\" />\n          </RowItem>\n          <RowItem>\n            <Text fontSize=\"18px\" mr=\"16px\">\n              - Earn 40% on Presale!!\n            </Text>\n          </RowItem>\n          <RowItem>\n            <Text fontSize=\"18px\" mr=\"16px\">\n              - Unsold Supply will be burned!\n            </Text>\n          </RowItem>\n        </StyledPreSaleCard>\n      </Row>\n    </>\n  )\n}\n\nexport default PresaleContribute\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\nexport const usePreSaleAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import React from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\nimport { usePreSaleContract } from 'hooks/useContract'\nimport Page from 'components/layout/Page'\nimport Hero from './components/Hero'\nimport PresaleContribute from './components/PresaleContribute'\n\nconst Presale = () => {\n  const { account } = useWallet()\n  // presale contract address\n  const address = '0xd70E46a518E6a2608f4e12ac2e368743e6701Cfa'\n  // token address\n  const currencyAddress = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n  const contract = usePreSaleContract(address)\n  return (\n    <>\n      <Page>\n        <Hero />\n        <PresaleContribute\n          address={address}\n          currency=\"USDC\"\n          currencyAddress={currencyAddress}\n          tokenDecimals={6}\n          contract={contract}\n        />\n      </Page>\n    </>\n  )\n}\n\nexport default Presale\n"],"sourceRoot":""}