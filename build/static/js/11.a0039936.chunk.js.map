{"version":3,"sources":["hooks/useApprove.ts","components/Input/Input.tsx","hooks/useHarvest.ts","components/Spacer/Spacer.tsx","config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/ModalActions/ModalActions.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/components/VaultCard/DetailsSection.tsx","views/Farms/components/VaultCard/CardHeading.tsx","views/Farms/components/VaultCard/StakeAction.tsx","views/Farms/components/VaultCard/CardActionsContainer.tsx","views/Farms/components/VaultCard/ApyCalculatorModal.tsx","views/Farms/components/VaultCard/ApyButton.tsx","views/Farms/components/VaultCard/VaultCard.tsx","views/Farms/Farms.tsx"],"names":["useApprove","lpContract","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","useToast","toastError","toastSuccess","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","useAutoApprove","vaultContrat","useVault","usePreSaleApprove","tokenContract","spenderAddress","methods","ethers","constants","MaxUint256","send","from","StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","useHarvest","farmPid","onReward","harvest","txHash","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","StyledSpacer","size","Spacer","s","useContext","ThemeContext","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BLOCKS_PER_DAY","FlexLayout","Wrapper","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","exchange","TranslateString","useI18n","liquidityUrlPathParts","swapURLFirstPart","addURLFirstPart","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useStake","onStake","amount","decimals","stake","console","info","useUnstake","onUnstake","unstake","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","useValue","useMax","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","tokenDecimals","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","undefined","handleChange","e","currentTarget","handleSelectMax","title","disabled","isNaN","isLessThanOrEqualTo","WithdrawModal","IconButtonWrapper","Label","textSubtle","SciNumber","StakeAction","stakedBalance","tokenBalance","usdStaked","quoteTokenDecimals","rawStakedBalance","getBalanceNumber","correctedStakeBalance","parseFloat","toPrecision","displayBalance","getCorrectedNumber","correctedDisplayUsd","displayUSD","useModal","onPresentDeposit","onPresentWithdraw","toExponential","split","gt","mr","BalanceAndCompound","HarvestAction","earnings","usdEarnings","rawEarningsBalance","toFixed","marginBottom","Action","CardActions","ToastContainer","farm","ethereum","totalValue","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","cakePrice","usePriceCakeBusd","getContract","handleApprove","error","lpStakedTotal","textTransform","fontSize","pr","multipliedBy","dividedBy","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","StyledCardAccentSpecial","FCard","card","background","concat","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","wethPrice","routePrice","showExpandableSection","setShowExpandableSection","toLowerCase","lpTotalInQuoteToken","QuoteToken","BNB","SIGMA","WETH","ROUTE","Number","maximumFractionDigits","farmAPY","minimumFractionDigits","formatted","forEach","format","parts","match","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","log","VaultCard","CAKE","Farms","farmsProps","path","farmsLP","useFarms","usePriceBnbBusd","usePriceWethBusd","usePriceBtcBusd","usePriceRouteBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerBlock","eggPerBlock","poolWeight","pow","isVault","prate","plus","minus","cakeRewardPerYear","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/11.a0039936.chunk.js","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport useToast from 'hooks/useToast'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery, useVault } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      toastSuccess('Success', `Got approval!`)\n      return tx\n    } catch (e) {\n      toastError('An error occurred.', `Did not get approval, please try again`)\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract, toastError, toastSuccess])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a AutoPool\nexport const useAutoApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const vaultContrat = useVault()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, vaultContrat, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      toastSuccess('Success', `Got approval!`)\n      return tx\n    } catch (e) {\n      toastError('An error occurred.', `Did not get approval, please try again`)\n      return false\n    }\n  }, [account, dispatch, lpContract, vaultContrat, toastError, toastSuccess])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport const usePreSaleApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useToast from 'hooks/useToast'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, autoharvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useVault } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleHarvest = useCallback(async () => {\n    try {\n      const txHash = await harvest(masterChefContract, farmPid, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      toastSuccess('Success', 'Harvesting transaction confirmed')\n      return txHash\n    } catch (e) {\n      toastError('An error occurred.', `Harvesting unsuccessful, please try again`)\n      return false\n    }\n  }, [account, dispatch, farmPid, masterChefContract, toastError, toastSuccess])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAutoHarvest = () => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const vaultContract = useVault()\n\n  const handleHarvest = useCallback(async () => {\n    await autoharvest(vaultContract, account)\n    // dispatch(updateUserPendingReward(sousId, account))\n    // dispatch(updateUserBalance(sousId, account))\n  }, [account, vaultContract])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(0.05)\n// export const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BLOCKS_PER_YEAR = new BigNumber(15017142) // 15017142 ?\nexport const BLOCKS_PER_DAY = new BigNumber(41143) // 15017142 ?\nexport const BSC_BLOCK_TIME = 2 // polygon\n\nexport const CAKE_POOL_PID = 0\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n\n  if (pid === 4) {\n    // SIGMA-WETH\n    return `0x72572CCf5208b59f4BcC14e6653d8c31Cd1fC5a0/0x7ceb23fd6bc0add59e62ac25578270cff1b9f619`\n  }\n  if (pid === 12) {\n    // SIGMA-ROUTE\n    return `0x72572CCf5208b59f4BcC14e6653d8c31Cd1fC5a0/0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4`\n  }\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  pid: number\n  exchange?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  pid,\n  exchange,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid })\n\n  let swapURLFirstPart = 'https://quickswap.exchange/#/swap'\n  let addURLFirstPart = 'https://quickswap.exchange/#/add'\n\n  switch (exchange) {\n    case 'DFYN':\n      swapURLFirstPart = 'https://exchange.dfyn.network/#/swap'\n      addURLFirstPart = 'https://exchange.dfyn.network/#/add'\n      break\n    case 'QuickSwap':\n    default:\n      break\n  }\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `${swapURLFirstPart}/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `${addURLFirstPart}/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on polygonscan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\nconst SpecialTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<VerifiedIcon />}>\n    SPECIAL\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, SpecialTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, SpecialTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  color: #ffffff;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          <MultiplierTag variant=\"success\">{multiplier}</MultiplierTag>\n        </Flex>\n        {/* {risk===999?<SpecialTag/>: null} */}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport useToast from 'hooks/useToast'\n\nimport { stake, sousStake, sousStakeBnb, autostake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useVault } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      try {\n        const txHash = await stake(masterChefContract, pid, amount, account, decimals)\n        dispatch(fetchFarmUserDataAsync(account))\n        console.info(txHash)\n        toastSuccess('Success', 'Staking transaction confirmed')\n      } catch (e) {\n        toastError('An error occurred.', `Transaction unsuccessful, please try again`)\n      }\n    },\n    [account, dispatch, masterChefContract, pid, toastSuccess, toastError],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useAutoStake = () => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const vaultContract = useVault()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      try {\n        const txHash = await autostake(vaultContract, amount, account)\n        dispatch(fetchFarmUserDataAsync(account))\n        console.info(txHash)\n        toastSuccess('Success', 'Staking transaction confirmed')\n      } catch (e) {\n        toastError('An error occurred.', `Transaction unsuccessful, please try again`)\n      }\n    },\n    [account, dispatch, vaultContract, toastSuccess, toastError],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport useToast from 'hooks/useToast'\n\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake, autounstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef, useVault } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      try {\n        const txHash = await unstake(masterChefContract, pid, amount, account, decimals)\n        dispatch(fetchFarmUserDataAsync(account))\n        console.info(txHash)\n        toastSuccess('Success', 'Unstaking transaction confirmed')\n      } catch (e) {\n        toastError('An error occurred.', `Transaction unsuccessful, please try again`)\n      }\n    },\n    [account, dispatch, masterChefContract, pid, toastSuccess, toastError],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useAutoUnstake = () => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const vaultContract = useVault()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      try {\n        const txHash = await autounstake(vaultContract, amount, account, 18)\n        dispatch(fetchFarmUserDataAsync(account))\n        console.info(txHash)\n        toastSuccess('Success', 'Unstaking transaction confirmed')\n      } catch (e) {\n        toastError('An error occurred.', `Transaction unsuccessful, please try again`)\n      }\n    },\n    [account, dispatch, vaultContract, toastSuccess, toastError],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  const useValue = value\n  const useMax = max\n\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {useMax.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={useValue}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(useValue || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  isTokenOnly: boolean\n  max: BigNumber\n  onConfirm: (amount: string, decimals: number) => void\n  onDismiss?: () => void\n  tokenName?: string\n  tokenDecimals?: number\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  isTokenOnly,\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  tokenDecimals = 18,\n  depositFeeBP = 0,\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, isTokenOnly ? tokenDecimals : undefined)\n  }, [max, isTokenOnly, tokenDecimals])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || new BigNumber(val).isNaN() || new BigNumber(val).isLessThanOrEqualTo(0)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, isTokenOnly ? tokenDecimals : undefined)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  isTokenOnly: boolean\n  max: BigNumber\n  onConfirm: (amount: string, decimals: number) => void\n  onDismiss?: () => void\n  tokenName?: string\n  tokenDecimals?: number\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({\n  isTokenOnly,\n  onConfirm,\n  onDismiss,\n  max,\n  tokenName = '',\n  tokenDecimals = 18,\n}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, isTokenOnly ? tokenDecimals : undefined)\n  }, [max, isTokenOnly, tokenDecimals])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || new BigNumber(val).isNaN() || new BigNumber(val).isLessThanOrEqualTo(0)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, isTokenOnly ? tokenDecimals : undefined)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getCorrectedNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  isTokenOnly?: boolean\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenDecimals?: number\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n  usdStaked: BigNumber\n  quoteTokenDecimals: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 12px;\n  align: left;\n  display: inline;\n`\n\nconst SciNumber = styled.div`\n  display: flex;\n  white-space: nowrap;\n  overflow: hidden;\n  justify-content: center;\n  align-items: baseline;\n  white-space: pre;\n`\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  isTokenOnly,\n  stakedBalance,\n  tokenBalance,\n  tokenDecimals,\n  tokenName,\n  pid,\n  depositFeeBP,\n  usdStaked,\n  quoteTokenDecimals,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance, tokenDecimals)\n  const correctedStakeBalance = parseFloat(rawStakedBalance.toPrecision(4))\n  const displayBalance = getCorrectedNumber(correctedStakeBalance)\n\n  const rawDisplayUsd = getBalanceNumber(usdStaked, isTokenOnly ? tokenDecimals : quoteTokenDecimals)\n  // const correctedDisplayUsd = parseFloat(rawDisplayUsd.toPrecision(4));\n  const correctedDisplayUsd = rawDisplayUsd\n  const displayUSD = getCorrectedNumber(correctedDisplayUsd)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      isTokenOnly={isTokenOnly}\n      max={tokenBalance}\n      onConfirm={onStake}\n      tokenName={tokenName}\n      tokenDecimals={tokenDecimals}\n      depositFeeBP={depositFeeBP}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      isTokenOnly={isTokenOnly}\n      max={stakedBalance}\n      onConfirm={onUnstake}\n      tokenName={tokenName}\n      tokenDecimals={tokenDecimals}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon />\n        </IconButton>\n        <IconButton onClick={onPresentDeposit}>\n          <AddIcon />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={correctedStakeBalance === 0 ? 'textDisabled' : 'text'}>\n        <SciNumber>\n          {displayBalance}\n          {correctedStakeBalance < 1e-5 && correctedStakeBalance > 0 ? (\n            <Label>\n              {'  '}e{correctedStakeBalance.toExponential(2).split('e')[1].toLocaleString()}\n            </Label>\n          ) : null}{' '}\n        </SciNumber>{' '}\n        <SciNumber>\n          {usdStaked.gt(0) ? (\n            <Label>\n              ~$\n              {displayUSD}\n              {correctedDisplayUsd < 1e-5 && correctedDisplayUsd > 0 ? (\n                <Label>\n                  {'  '}e{correctedDisplayUsd.toExponential(2).split('e')[1].toLocaleString()}\n                </Label>\n              ) : null}{' '}\n              USD\n            </Label>\n          ) : null}\n        </SciNumber>\n      </Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n  usdEarnings: BigNumber\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 12px;\n`\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, usdEarnings }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        <Label>~${usdEarnings.toFixed(2)} USD</Label>\n      </Heading>\n      <BalanceAndCompound>\n        {pid === 0 ? (\n          // {false ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"tertiary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString(), 18)\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text, ToastContainer, toastTypes } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser, usePriceCakeBusd } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nconst ToastContainerSticky = styled(ToastContainer)`\n  position: absolute;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  totalValue?: BigNumber\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, totalValue }) => {\n  const TranslateString = useI18n()\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const cakePrice = usePriceCakeBusd()\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  let usdStaked = stakedBalance\n\n  if (totalValue) {\n    usdStaked = usdStaked.times(new BigNumber(totalValue).div(farm.lpStakedTotal))\n  }\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        isTokenOnly={isTokenOnly}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenDecimals={farm.tokenDecimals}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n        usdStaked={usdStaked}\n        quoteTokenDecimals={farm.quoteTokenDecimals}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          SIGMA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} usdEarnings={cakePrice.multipliedBy(earnings.dividedBy(10 ** 18))} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  pid: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n  pid,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'SIGMA per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://quickswap.exchange/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  pid: number\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n  pid,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n      pid={pid}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst StyledCardAccentSpecial = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(0, 255, 255, 1) 0%,\n    rgba(0, 101, 255, 1) 10%,\n    rgba(47, 255, 222, 1) 20%,\n    rgba(176, 35, 181, 1) 30%,\n    rgba(192, 37, 39, 1) 40%,\n    rgba(208, 54, 29, 1) 50%,\n    rgba(197, 98, 17, 1) 60%,\n    rgba(95, 234, 13, 1) 70%,\n    rgba(69, 243, 7, 1) 80%,\n    rgba(4, 248, 38, 1) 90%,\n    rgba(0, 255, 255, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\n// background: linear-gradient(to top,rgb(255,255,255,.6), rgb(255,255,255,1));\nconst FCard = styled.div`\n  align-self: baseline;\n  background: linear-gradient(\n    to top,\n    ${(props) => props.theme.card.background.concat('C8')},\n    ${(props) => props.theme.card.background.concat('FF')}\n  );\n\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n  btcPrice?: BigNumber\n  wethPrice?: BigNumber\n  routePrice?: BigNumber\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({\n  farm,\n  removed,\n  cakePrice,\n  bnbPrice,\n  ethereum,\n  account,\n  wethPrice,\n  routePrice,\n}) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.SIGMA) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.WETH) {\n      return wethPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.ROUTE) {\n      return routePrice.times(farm.lpTotalInQuoteToken)\n    }\n\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol, wethPrice, routePrice])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'SIGMA'\n  let farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n  const formats = [\n    { value: 1e3, symbol: 'K' },\n    { value: 1e6, symbol: 'M' },\n    { value: 1e9, symbol: 'B' },\n    { value: 1e12, symbol: 'T' },\n  ]\n  let formatted = farmAPY\n  formats.forEach((format) => {\n    if (farm.apy.times(new BigNumber(100).toNumber()).gt(format.value)) {\n      formatted =\n        farm.apy &&\n        farm.apy.times(new BigNumber(100)).div(format.value).toNumber().toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })\n      const parts = formatted.match(/([\\D]*)([\\d.,]+)([\\D]*)/)\n      formatted = `${parts[1]}${parts[2]} ${format.symbol}${parts[3]}`\n    }\n  })\n\n  farmAPY = formatted\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk, lpSymbol } = farm\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'SIGMA' && <StyledCardAccent />}\n      {farm.risk === 999 && <StyledCardAccentSpecial />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                  pid={farm.pid}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} totalValue={totalValue} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://polygonscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://polygonscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          pid={farm.pid}\n          exchange={farm.exchange}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  pid: number\n  exchange?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  pid,\n  exchange,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid })\n\n  let swapURLFirstPart = 'https://quickswap.exchange/#/swap'\n  let addURLFirstPart = 'https://quickswap.exchange/#/add'\n\n  switch (exchange) {\n    case 'DFYN':\n      swapURLFirstPart = 'https://exchange.dfyn.network/#/swap'\n      addURLFirstPart = 'https://exchange.dfyn.network/#/add'\n      break\n    case 'QuickSwap':\n    default:\n      break\n  }\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `${swapURLFirstPart}/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `${addURLFirstPart}/${liquidityUrlPathParts}`\n          }\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormated}</Text>\n      </Flex>\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on polygonscan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, SpecialTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  color: #ffffff;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {multiplier === 'Auto' ? (\n            <MultiplierTag variant=\"primary\">{multiplier}</MultiplierTag>\n          ) : (\n            <MultiplierTag variant=\"success\">{multiplier}</MultiplierTag>\n          )}\n        </Flex>\n        {/* {risk===999?<SpecialTag/>: null} */}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getCorrectedNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  isTokenOnly?: boolean\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenDecimals?: number\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n  usdStaked: BigNumber\n  quoteTokenDecimals: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 12px;\n  align: left;\n  display: inline;\n`\n\nconst SciNumber = styled.div`\n  display: flex;\n  white-space: nowrap;\n  overflow: hidden;\n  justify-content: center;\n  align-items: baseline;\n  white-space: pre;\n`\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  isTokenOnly,\n  stakedBalance,\n  tokenBalance,\n  tokenDecimals,\n  tokenName,\n  pid,\n  depositFeeBP,\n  usdStaked,\n  quoteTokenDecimals,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance, tokenDecimals)\n  const correctedStakeBalance = parseFloat(rawStakedBalance.toPrecision(4))\n  const displayBalance = getCorrectedNumber(correctedStakeBalance)\n\n  const rawDisplayUsd = getBalanceNumber(usdStaked, isTokenOnly ? tokenDecimals : quoteTokenDecimals)\n  // const correctedDisplayUsd = parseFloat(rawDisplayUsd.toPrecision(4));\n  const correctedDisplayUsd = rawDisplayUsd\n  const displayUSD = getCorrectedNumber(correctedDisplayUsd)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      isTokenOnly={isTokenOnly}\n      max={tokenBalance}\n      onConfirm={onStake}\n      tokenName={tokenName}\n      tokenDecimals={tokenDecimals}\n      depositFeeBP={depositFeeBP}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      isTokenOnly={isTokenOnly}\n      max={stakedBalance}\n      onConfirm={onUnstake}\n      tokenName={tokenName}\n      tokenDecimals={tokenDecimals}\n    />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon />\n        </IconButton>\n        <IconButton onClick={onPresentDeposit}>\n          <AddIcon />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={correctedStakeBalance === 0 ? 'textDisabled' : 'text'}>\n        <SciNumber>\n          {displayBalance}\n          {correctedStakeBalance < 1e-5 && correctedStakeBalance > 0 ? (\n            <Label>\n              {'  '}e{correctedStakeBalance.toExponential(2).split('e')[1].toLocaleString()}\n            </Label>\n          ) : null}{' '}\n        </SciNumber>{' '}\n        <SciNumber>\n          {usdStaked.gt(0) ? (\n            <Label>\n              ~$\n              {displayUSD}\n              {correctedDisplayUsd < 1e-5 && correctedDisplayUsd > 0 ? (\n                <Label>\n                  {'  '}e{correctedDisplayUsd.toExponential(2).split('e')[1].toLocaleString()}\n                </Label>\n              ) : null}{' '}\n              USD\n            </Label>\n          ) : null}\n        </SciNumber>\n      </Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text, ToastContainer, Heading } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser, usePriceCakeBusd } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useAutoApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nconst ToastContainerSticky = styled(ToastContainer)`\n  position: absolute;\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 12px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  totalValue?: BigNumber\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, totalValue }) => {\n  const TranslateString = useI18n()\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  console.log(pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  console.log(allowance)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const cakePrice = usePriceCakeBusd()\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useAutoApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  let usdStaked = stakedBalance\n\n  if (totalValue) {\n    usdStaked = usdStaked.times(new BigNumber(totalValue).div(farm.lpStakedTotal))\n  }\n\n  const profit = 0\n  console.log(isApproved)\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        isTokenOnly={isTokenOnly}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenDecimals={farm.tokenDecimals}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n        usdStaked={usdStaked}\n        quoteTokenDecimals={farm.quoteTokenDecimals}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex justifyContent=\"space-between\">\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          Recent SIGMA Profit:\n        </Text>\n        <Heading color={profit === 0 ? 'textDisabled' : 'text'}>{profit}</Heading>\n      </Flex>\n      <Flex justifyContent=\"space-between\" mb=\"12px\">\n        <Text bold color=\"secondary\" fontSize=\"13px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          0.1% unstaking fee if withdrawn within 72h\n        </Text>\n      </Flex>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  pid: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n  pid,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, pid })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'SIGMA per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://quickswap.exchange/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n  pid: number\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n  pid,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n      pid={pid}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst StyledCardAccentSpecial = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(0, 255, 255, 1) 0%,\n    rgba(0, 101, 255, 1) 10%,\n    rgba(47, 255, 222, 1) 20%,\n    rgba(176, 35, 181, 1) 30%,\n    rgba(192, 37, 39, 1) 40%,\n    rgba(208, 54, 29, 1) 50%,\n    rgba(197, 98, 17, 1) 60%,\n    rgba(95, 234, 13, 1) 70%,\n    rgba(69, 243, 7, 1) 80%,\n    rgba(4, 248, 38, 1) 90%,\n    rgba(0, 255, 255, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\n// background: linear-gradient(to top,rgb(255,255,255,.6), rgb(255,255,255,1));\nconst FCard = styled.div`\n  align-self: baseline;\n  background: linear-gradient(\n    to top,\n    ${(props) => props.theme.card.background.concat('C8')},\n    ${(props) => props.theme.card.background.concat('FF')}\n  );\n\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  cakePrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst VaultCard: React.FC<FarmCardProps> = ({ farm, cakePrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n\n    return farm.lpTotalInQuoteToken\n  }, [cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'SIGMA'\n  let farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n  const formats = [\n    { value: 1e3, symbol: 'K' },\n    { value: 1e6, symbol: 'M' },\n    { value: 1e9, symbol: 'B' },\n    { value: 1e12, symbol: 'T' },\n  ]\n  let formatted = farmAPY\n  formats.forEach((format) => {\n    if (farm.apy.times(new BigNumber(100).toNumber()).gt(format.value)) {\n      formatted =\n        farm.apy &&\n        farm.apy.times(new BigNumber(100)).div(format.value).toNumber().toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })\n      const parts = formatted.match(/([\\D]*)([\\d.,]+)([\\D]*)/)\n      formatted = `${parts[1]}${parts[2]} ${format.symbol}${parts[3]}`\n    }\n  })\n\n  farmAPY = formatted\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk, lpSymbol } = farm\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'SIGMA' && <StyledCardAccent />}\n      {farm.risk === 999 && <StyledCardAccentSpecial />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier=\"Auto\"\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Text>APY:</Text>\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n          {farm.apy ? (\n            <>\n              <ApyButton\n                lpLabel={lpLabel}\n                quoteTokenAdresses={quoteTokenAdresses}\n                quoteTokenSymbol={quoteTokenSymbol}\n                tokenAddresses={tokenAddresses}\n                cakePrice={cakePrice}\n                apy={farm.apy}\n                pid={farm.pid}\n              />\n              {farmAPY}%\n            </>\n          ) : (\n            <Skeleton height={24} width={80} />\n          )}\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} totalValue={totalValue} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://polygonscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://polygonscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          pid={farm.pid}\n          exchange={farm.exchange}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default VaultCard\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, BLOCKS_PER_DAY } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport {\n  useFarms,\n  usePriceBnbBusd,\n  usePriceCakeBusd,\n  usePriceWethBusd,\n  usePriceBtcBusd,\n  usePriceRouteBusd,\n} from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport Background from '../Background'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport VaultCard from './components/VaultCard/VaultCard'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const wethPrice = usePriceWethBusd()\n  const btcPrice = usePriceBtcBusd()\n  const routePrice = usePriceRouteBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  // console.log(vaultPool)\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.SIGMA) {\n          totalValue = totalValue.times(cakePrice)\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.WETH) {\n          totalValue = totalValue.times(wethPrice)\n        }\n        if (farm.quoteTokenSymbol === QuoteToken.ROUTE) {\n          totalValue = totalValue.times(routePrice)\n        }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        let apy\n        if (farm.isVault) {\n          const cakeRewardPerDay = cakeRewardPerBlock.times(BLOCKS_PER_DAY)\n          const prate = cakeRewardPerDay.div(totalValue)\n          apy = cakePrice.times(prate.plus(new BigNumber(1)).pow(new BigNumber(365)).minus(new BigNumber(1)))\n        } else {\n          const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n          apy = cakePrice.times(cakeRewardPerYear)\n          if (totalValue.comparedTo(0) > 0) {\n            apy = apy.div(totalValue)\n          }\n        }\n        return { ...farm, apy }\n      })\n\n      return farmsToDisplayWithAPY.map((farm) =>\n        farm.isVault ? (\n          <VaultCard key={farm.pid} farm={farm} cakePrice={cakePrice} ethereum={ethereum} account={account} />\n        ) : (\n          <FarmCard\n            key={farm.pid}\n            farm={farm}\n            removed={removed}\n            bnbPrice={bnbPrice}\n            cakePrice={cakePrice}\n            ethereum={ethereum}\n            account={account}\n            wethPrice={wethPrice}\n            // btcPrice={btcPrice}\n            routePrice={routePrice}\n          />\n        ),\n      )\n    },\n    [bnbPrice, account, cakePrice, ethereum, wethPrice, routePrice],\n  )\n\n  return (\n    <>\n      <Page>\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n          {tokenMode\n            ? TranslateString(10002, 'Stake tokens to earn SIGMA')\n            : TranslateString(320, 'Stake LP tokens to earn SIGMA')}\n        </Heading>\n        <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n          {TranslateString(10000, 'Deposit Fee will be used to buyback SIGMA')}\n        </Heading>\n        <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n        <div>\n          <Divider />\n          <FlexLayout>\n            <Route exact path={`${path}`}>\n              {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n            </Route>\n            <Route exact path={`${path}/history`}>\n              {farmsList(inactiveFarms, true)}\n            </Route>\n          </FlexLayout>\n        </div>\n        {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n      </Page>\n      {/* <Background enableConsent/> */}\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}