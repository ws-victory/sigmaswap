{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","utils/callHelpers.ts","components/UnlockButton.tsx","utils/erc20.ts","utils/encode.ts","config/constants/index.ts"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getCorrectedNumber","digits","toExponential","toLocaleString","undefined","maximumFractionDigits","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useVault","vault","getVaultAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","usePreSaleContract","preSale","cookies","Cookies","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","get","isAddress","rot13","ref","deposit","times","toString","on","tx","transactionHash","autostake","vaultContract","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","autounstake","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","autoharvest","havest","soushHarvest","soushHarvestBnb","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","getContract","provider","getAllowance","allowance","call","getTokenBalance","tokenAddress","userAddress","balanceOf","s","c","indexOf","farmsConfig","filter","farm","isCommunity","map","tokenSymbol"],"mappings":"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","file":"static/js/1.9e3c86fa.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getCorrectedNumber = (balance: number) => {\n  const digits = balance > 0.001 ? 4 : 9\n\n  return balance < 1e-5 && balance > 0\n    ? balance.toExponential(2).split('e')[0].toLocaleString()\n    : balance.toLocaleString(undefined, { maximumFractionDigits: balance > 1 ? 2 : digits })\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getMasterChefAddress,\n  getCakeAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n  getVaultAddress,\n} from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport vault from 'config/abi/vault.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\nimport preSale from 'config/abi/presale.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = ifo as unknown as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = erc20 as unknown as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = rabbitmintingfarm as unknown as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = pancakeRabbits as unknown as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = lottery as unknown as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = lotteryTicket as unknown as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = masterChef as unknown as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useVault = () => {\n  const abi = vault as unknown as AbiItem\n  return useContract(abi, getVaultAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = rawAbi as unknown as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport const usePreSaleContract = (address: string) => {\n  const preSaleAbi = preSale as unknown as AbiItem\n  return useContract(preSaleAbi, address)\n}\n\nexport default useContract\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport Cookies from 'universal-cookie'\nimport rot13 from './encode'\nimport { isAddress } from './web3'\n\nconst cookies = new Cookies()\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account, decimals = 18) => {\n  let ref\n  if (cookies.get('ref')) {\n    if (isAddress(rot13(cookies.get('ref')))) {\n      ref = rot13(cookies.get('ref'))\n    }\n  } else {\n    ref = '0x0000000000000000000000000000000000000000'\n  }\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(), ref)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const autostake = async (vaultContract, amount, account, decimals = 18) => {\n  return vaultContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account, decimals = 18) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const autounstake = async (vaultContract, amount, account, decimals = 18) => {\n  return vaultContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  let ref\n  if (cookies.get('ref')) {\n    if (isAddress(rot13(cookies.get('ref')))) {\n      ref = rot13(cookies.get('ref'))\n    }\n  } else {\n    ref = '0x0000000000000000000000000000000000000000'\n  }\n  return masterChefContract.methods\n    .deposit(pid, '0', ref)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const autoharvest = async (vaultContract, account) => {\n  let ref\n  if (cookies.get('ref')) {\n    if (isAddress(rot13(cookies.get('ref')))) {\n      ref = rot13(cookies.get('ref'))\n    }\n  } else {\n    ref = '0x0000000000000000000000000000000000000000'\n  }\n  return vaultContract.methods\n    .havest()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(erc20 as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","function rot13(s) {\n  return s.replace(\n    /[A-Z]/gi,\n    (c) =>\n      'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'[\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.indexOf(c)\n      ],\n  )\n}\n\nexport default rot13\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"],"sourceRoot":""}